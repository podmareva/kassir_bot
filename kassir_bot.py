# main_cashier_bot.py
import os, json, secrets
from datetime import datetime, timedelta
from typing import Optional

import psycopg
from psycopg.rows import dict_row
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

load_dotenv()

# === ENV (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å .env) ===
BOT_TOKEN    = os.getenv("CASHIER_BOT_TOKEN")
ADMIN_ID     = int(os.getenv("ADMIN_ID", "0"))
DATABASE_URL = os.getenv("DATABASE_URL")

# –¶–µ–ª–µ–≤—ã–µ –±–æ—Ç—ã
BOT_UNPACK = os.getenv("BOT_UNPACK", "jtbd_assistant_bot")
BOT_COPY   = os.getenv("BOT_COPY",   "content_helper_assist_bot")
BOT_PHOTO  = os.getenv("BOT_PHOTO",  "AIPromoPhotoBot")

# –Æ—Ä-–¥–æ–∫—É–º–µ–Ω—Ç—ã
POLICY_URL      = os.getenv("POLICY_URL")
OFFER_URL       = os.getenv("OFFER_URL")
ADS_CONSENT_URL = os.getenv("ADS_CONSENT_URL")

# –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¢-–ë–∞–Ω–∫–∞
PAY_PHONE   = os.getenv("PAY_PHONE", "+7XXXXXXXXXX")           # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü/–¢-–ë–∞–Ω–∫
PAY_NAME    = os.getenv("PAY_NAME", "–ò—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –ü.")  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å
PAY_BANK    = os.getenv("PAY_BANK", "–¢-–ë–∞–Ω–∫")                  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –±–∞–Ω–∫–∞

# –ö—Ä—É–∂–æ–∫ (video note): file_id (–ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –∫—Ä—É–∂–∫–∞ –∞–¥–º–∏–Ω–æ–º ‚Äî —Å–º. —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∏–∂–µ)
DEV_VIDEO_NOTE_ID = os.getenv("DEV_VIDEO_NOTE_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "AQAD...AAQ"
DEV_INFO = os.getenv("DEV_INFO", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –∑–∞–≥–ª—É—à–∫–∞.\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_username")

# TTL –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (—á–∞—Å—ã)
TOKEN_TTL_HOURS = int(os.getenv("TOKEN_TTL_HOURS", "48"))

# –ê–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞?
PROMO_ACTIVE = os.getenv("PROMO_ACTIVE", "true").lower() == "true"
# –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
PROMO_PRICES = {
    "unpack": 1890.00,
    "copy":   2490.00,
    "photo":  2490.00,
    "b12":    3990.00,
    "b13":    3790.00,
    "b23":    4490.00,
    "b123":   5990.00,
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
if not (BOT_TOKEN and ADMIN_ID and DATABASE_URL and POLICY_URL and OFFER_URL and ADS_CONSENT_URL):
    raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å .env: CASHIER_BOT_TOKEN, ADMIN_ID, DATABASE_URL, POLICY_URL, OFFER_URL, ADS_CONSENT_URL")

# === DB ===
conn = psycopg.connect(DATABASE_URL, autocommit=True, sslmode="require", row_factory=dict_row)
cur  = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS consents(
  user_id BIGINT PRIMARY KEY,
  accepted_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS products(
  code TEXT PRIMARY KEY,
  title TEXT NOT NULL,
  price NUMERIC(10,2) NOT NULL,
  targets JSONB NOT NULL
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS orders(
  id BIGSERIAL PRIMARY KEY,
  user_id BIGINT NOT NULL,
  product_code TEXT NOT NULL REFERENCES products(code),
  amount NUMERIC(10,2) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',  -- pending/await_receipt/paid/rejected
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS receipts(
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  file_id TEXT NOT NULL,
  file_type TEXT NOT NULL,  -- photo/document
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS tokens(
  token TEXT PRIMARY KEY,
  bot_name TEXT NOT NULL,
  user_id BIGINT NOT NULL,
  expires_at TIMESTAMPTZ NULL
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS allowed_users(
  user_id BIGINT NOT NULL,
  bot_name TEXT NOT NULL,
  PRIMARY KEY(user_id, bot_name)
);""")
# –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
cur.execute("""CREATE TABLE IF NOT EXISTS invoice_requests(
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  requested_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  closed BOOLEAN NOT NULL DEFAULT FALSE
);""")

# –ö–∞—Ç–∞–ª–æ–≥ (–±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã; –ø—Ä–∏ PROMO_ACTIVE –ø—Ä–∏–º–µ–Ω–∏–º PROMO_PRICES –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–∫–∞–∑–∞)
CATALOG = {
    "unpack": {"title": "–ë–æ—Ç ‚Ññ1 ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê (JTBD)¬ª", "price": 2990.00,  "targets": [BOT_UNPACK]},
    "copy":   {"title": "–ë–æ—Ç ‚Ññ2 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª",  "price": 5490.00,  "targets": [BOT_COPY]},
    "photo":  {"title": "–ë–æ—Ç ‚Ññ3 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ¬ª","price": 4490.00, "targets": [BOT_PHOTO]},
    "b12":    {"title": "–ü–∞–∫–µ—Ç 1+2",                              "price": 7990.00,  "targets": [BOT_UNPACK, BOT_COPY]},
    "b13":    {"title": "–ü–∞–∫–µ—Ç 1+3",                              "price": 6990.00,  "targets": [BOT_UNPACK, BOT_PHOTO]},
    "b23":    {"title": "–ü–∞–∫–µ—Ç 2+3",                              "price": 9490.00,  "targets": [BOT_COPY, BOT_PHOTO]},
    "b123":   {"title": "–ü–∞–∫–µ—Ç 1+2+3 (–≤—ã–≥–æ–¥–Ω–æ)",                  "price":11990.00,  "targets": [BOT_UNPACK, BOT_COPY, BOT_PHOTO]},
}
for code, p in CATALOG.items():
    cur.execute(
        """INSERT INTO products(code, title, price, targets)
           VALUES (%s,%s,%s,%s::jsonb)
           ON CONFLICT (code) DO UPDATE SET title=EXCLUDED.title, price=EXCLUDED.price, targets=EXCLUDED.targets""",
        (code, p["title"], p["price"], json.dumps(p["targets"]))
    )

# === –£—Ç–∏–ª–∏—Ç—ã ===
def user_consented(user_id: int) -> bool:
    cur.execute("SELECT 1 FROM consents WHERE user_id=%s", (user_id,))
    return cur.fetchone() is not None

def set_consent(user_id: int):
    cur.execute("INSERT INTO consents(user_id, accepted_at) VALUES(%s, now()) ON CONFLICT DO NOTHING", (user_id,))

def get_product(code: str) -> Optional[dict]:
    cur.execute("SELECT * FROM products WHERE code=%s", (code,))
    return cur.fetchone()

def current_price(code: str) -> float:
    base = float(get_product(code)["price"])
    if PROMO_ACTIVE and code in PROMO_PRICES:
        return float(PROMO_PRICES[code])
    return base

def create_order(user_id: int, code: str) -> int:
    price = current_price(code)
    cur.execute(
        "INSERT INTO orders(user_id, product_code, amount, status) VALUES(%s,%s,%s,'pending') RETURNING id",
        (user_id, code, price)
    )
    return cur.fetchone()["id"]

def set_status(order_id: int, status: str):
    cur.execute("UPDATE orders SET status=%s WHERE id=%s", (status, order_id))

def get_order(order_id: int) -> Optional[dict]:
    cur.execute("SELECT * FROM orders WHERE id=%s", (order_id,))
    return cur.fetchone()

def gen_tokens_with_ttl(user_id: int, targets: list[str], ttl_hours: int):
    links = []
    expires_at = datetime.utcnow() + timedelta(hours=ttl_hours) if ttl_hours > 0 else None
    for bot_name in targets:
        token = secrets.token_urlsafe(8)
        cur.execute(
            "INSERT INTO tokens(token, bot_name, user_id, expires_at) VALUES(%s,%s,%s,%s) ON CONFLICT DO NOTHING",
            (token, bot_name, user_id, expires_at)
        )
        links.append((bot_name, f"https://t.me/{bot_name}?start={token}"))
    return links

def shop_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ë–æ—Ç–∞ ‚Ññ1", callback_data="buy:unpack")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ë–æ—Ç–∞ ‚Ññ2", callback_data="buy:copy")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ë–æ—Ç–∞ ‚Ññ3", callback_data="buy:photo")],
        [InlineKeyboardButton("–ü–∞–∫–µ—Ç 1+2",        callback_data="buy:b12")],
        [InlineKeyboardButton("–ü–∞–∫–µ—Ç 1+3",        callback_data="buy:b13")],
        [InlineKeyboardButton("–ü–∞–∫–µ—Ç 2+3",        callback_data="buy:b23")],
        [InlineKeyboardButton("–ü–∞–∫–µ—Ç 1+2+3",      callback_data="buy:b123")],
    ])

PROMO_TEXT = (
    "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã\n"
    "(—Ç–æ–ª—å–∫–æ 2 –¥–Ω—è)\n\n"
    "üõ† –ë–æ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n"
    "‚Ä¢ –ë–æ—Ç ‚Ññ1 ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî 2 990 ‚ÇΩ ‚Üí 1 890 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 1 100 ‚ÇΩ)\n"
    "‚Ä¢ –ë–æ—Ç ‚Ññ2 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª ‚Äî 5 490 ‚ÇΩ ‚Üí 2 490 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 3 000 ‚ÇΩ)\n"
    "‚Ä¢ –ë–æ—Ç ‚Ññ3 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ¬ª ‚Äî 4 490 ‚ÇΩ ‚Üí 2 490 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 2 000 ‚ÇΩ)\n\n"
    "üíé –ü–∞–∫–µ—Ç—ã ‚Äî –µ—â—ë –≤—ã–≥–æ–¥–Ω–µ–µ\n"
    "‚Ä¢ 1+2 ‚Äî 7 990 ‚ÇΩ ‚Üí 3 990 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 4 000 ‚ÇΩ)\n"
    "‚Ä¢ 1+3 ‚Äî 6 990 ‚ÇΩ ‚Üí 3 790 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 3 200 ‚ÇΩ)\n"
    "‚Ä¢ 2+3 ‚Äî 8 490 ‚ÇΩ ‚Üí 4 490 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 4 000 ‚ÇΩ)\n"
    "‚Ä¢ 1+2+3 ‚Äî 11 990 ‚ÇΩ ‚Üí 5 990 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 6 000 ‚ÇΩ)\n\n"
    "üìå –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ —Ü–µ–Ω—ã –≤—ã—Ä–∞—Å—Ç—É—Ç."
)
ABOUT_BOTS = (
    "–ë–æ—Ç ‚Ññ1 ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê (JTBD)¬ª ‚Äî –ø—Ä–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ ¬´–ø–æ–∫—É–ø–∞—é—Ç¬ª, –∏ –∫–∞–∫ –ø–æ–¥ —ç—Ç–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
    "–ë–æ—Ç ‚Ññ2 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω, –ø–æ—Å—Ç—ã, Reels/Stories, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏.\n\n"
    "–ë–æ—Ç ‚Ññ3 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ¬ª ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ –≤–∞—à–∏—Ö —Å–Ω–∏–º–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞: —Ñ–æ–Ω/—Å—Ü–µ–Ω–∞/—Å–≤–µ—Ç –º–µ–Ω—è—é—Ç—Å—è, —Ç–æ–≤–∞—Ä –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ."
)
CONSENT_TEXT = (
    "–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n"
    f"‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî {POLICY_URL}\n"
    f"‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã ‚Äî {OFFER_URL}\n"
    f"‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî {ADS_CONSENT_URL}\n\n"
    "–ù–∞–∂–∏–º–∞—è ¬´‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è."
)



# --- Examples block (screens only) ---
async def send_examples_screens(ctx, chat_id: int):
    """Send media group with example screenshots/videos stored as file_id in .env.
    ENV vars (fill what you need): EXAMPLE_1_ID..EXAMPLE_5_ID
    """
    ids = [
        os.getenv("EXAMPLE_1_ID"),
        os.getenv("EXAMPLE_2_ID"),
        os.getenv("EXAMPLE_3_ID"),
        os.getenv("EXAMPLE_4_ID"),
        os.getenv("EXAMPLE_5_ID"),
    ]
    media = []
    valid = [x for x in ids if x]
    for i, fid in enumerate(valid):
        try:
            if i == 0:
                media.append(InputMediaPhoto(media=fid, caption="–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–æ–≤"))
            else:
                media.append(InputMediaPhoto(media=fid))
        except Exception as e:
            print("[examples] bad file_id skipped:", e)
    if media:
        try:
            await ctx.bot.send_media_group(chat_id=chat_id, media=media)
        except Exception as e:
            print("[examples] send_media_group error:", e)

# === Handlers ===
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    # –ö—Ä—É–∂–æ–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω file_id)
    if DEV_VIDEO_NOTE_ID:
        try:
            await ctx.bot.send_video_note(chat_id=uid, video_note=DEV_VIDEO_NOTE_ID)
        except Exception:
            pass

    # –Æ—Ä-–≥–µ–π—Ç
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="consent_ok")]
    ])
    await update.message.reply_text(CONSENT_TEXT, reply_markup=kb)
    # –ò–Ω—Ñ–æ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ (–∑–∞–≥–ª—É—à–∫–∞)
    await ctx.bot.send_message(chat_id=uid, text=DEV_INFO)

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "consent_ok":
        set_consent(uid)
        await q.edit_message_text(PROMO_TEXT)
        await ctx.bot.send_message(chat_id=uid, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=shop_keyboard())
        await ctx.bot.send_message(chat_id=uid, text=ABOUT_BOTS)
        # Reviews screenshots block
        await send_examples_screens(ctx, uid)
        return

    if q.data.startswith("buy:"):
        if not user_consented(uid):
            await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ.", show_alert=True)
            return
        code = q.data.split(":", 1)[1]
        prod = get_product(code)
        if not prod:
            await q.edit_message_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        order_id = create_order(uid, code)
        price = current_price(code)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É", callback_data=f"send_receipt:{order_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="consent_ok")]
        ])
        await q.edit_message_text(
            f"üßæ <b>{prod['title']}</b>\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price:.2f} ‚ÇΩ</b>\n\n"
            f"–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç—É {PAY_BANK}:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: <code>{PAY_PHONE}</code>\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>{PAY_NAME}</b>\n"
            f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <code>ORDER-{order_id}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É¬ª.",
            parse_mode="HTML",
            reply_markup=kb
        )
        # –û–∂–∏–¥–∞–µ–º —á–µ–∫
        set_status(order_id, "await_receipt")
        return

    if q.data.startswith("send_receipt:"):
        order_id = int(q.data.split(":", 1)[1])
        order = get_order(order_id)
        if not order or order["user_id"] != uid:
            await q.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await q.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç (—Ñ–æ—Ç–æ/—Å–∫–∞–Ω –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç PDF). "
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—à–ª—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏."
        )
        return

    if q.data.startswith("confirm:") or q.data.startswith("reject:") \
       or q.data.startswith("send_invoice:") or q.data.startswith("close_invoice:"):
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if uid != ADMIN_ID:
            await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        if q.data.startswith("confirm:") or q.data.startswith("reject:"):
            order_id = int(q.data.split(":", 1)[1])
            order = get_order(order_id)
            if not order:
                await q.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if q.data.startswith("reject:"):
                set_status(order_id, "rejected")
                await q.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id}: –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
                try:
                    await ctx.bot.send_message(order["user_id"], "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.")
                except Exception:
                    pass
                return

            # confirm
            set_status(order_id, "paid")
            prod = get_product(order["product_code"])
            links = gen_tokens_with_ttl(order["user_id"], prod["targets"], TOKEN_TTL_HOURS)

            warn = (
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ. –û–Ω–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è "
                f"(~{TOKEN_TTL_HOURS} —á) –∏ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
            )
            # —Å—Å—ã–ª–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            btns = [[InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å @{bn}", url=link)] for bn, link in links]
            btns.append([InlineKeyboardButton("üßæ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=f"request_invoice:{order['id']}")])
            await q.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            try:
                await ctx.bot.send_message(
                    chat_id=order["user_id"],
                    text="üéâ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" + warn,
                    reply_markup=InlineKeyboardMarkup(btns)
                )
            except Exception:
                pass
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞)
        if q.data.startswith("send_invoice:"):
            order_id = int(q.data.split(":", 1)[1])
            cur.execute("UPDATE invoice_requests SET closed=FALSE WHERE order_id=%s", (order_id,))
            # –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await q.edit_message_text(
                f"–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç ‚Äî —è –ø–µ—Ä–µ—à–ª—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.\n"
                "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å¬ª.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"close_invoice:{order_id}")]
                ])
            )
            return

        if q.data.startswith("close_invoice:"):
            order_id = int(q.data.split(":", 1)[1])
            cur.execute("UPDATE invoice_requests SET closed=TRUE WHERE order_id=%s", (order_id,))
            await q.edit_message_text(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–∫—Ä—ã—Ç.")
            return

    if q.data.startswith("request_invoice:"):
        # —ç—Ç–æ –≤—ã–∑–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        order_id = int(q.data.split(":", 1)[1])
        order = get_order(order_id)
        if not order or order["user_id"] != uid:
            await q.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        # —Å–æ–∑–¥–∞—ë–º/–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        cur.execute(
            "INSERT INTO invoice_requests(order_id, closed) VALUES(%s, FALSE) "
            "ON CONFLICT (order_id) DO UPDATE SET closed=FALSE",
            (order_id,)
        )
        kb_admin = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"send_invoice:{order_id}")],
            [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å",        callback_data=f"close_invoice:{order_id}")],
        ])
        try:
            await ctx.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üßæ –ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {uid}",
                reply_markup=kb_admin
            )
        except Exception:
            pass
        await q.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Ñ–∞–π–ª –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.", show_alert=True)
        return

async def receipts(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ await_receipt."""
    uid = update.effective_user.id
    # –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —á–µ–∫–∞
    cur.execute(
        "SELECT id FROM orders WHERE user_id=%s AND status='await_receipt' ORDER BY id DESC LIMIT 1",
        (uid,)
    )
    row = cur.fetchone()
    if not row:
        return
    order_id = row["id"]

    file_id, file_type = None, None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        file_type = "photo"
    elif update.message.document:
        file_id = update.message.document.file_id
        file_type = "document"
    if not file_id:
        return

    cur.execute("INSERT INTO receipts(order_id, file_id, file_type) VALUES(%s,%s,%s)", (order_id, file_id, file_type))
    set_status(order_id, "pending")

    kb_admin = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{order_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data=f"reject:{order_id}")]
    ])
    caption = f"üí≥ –ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {uid}"
    try:
        if file_type == "photo":
            await ctx.bot.send_photo(chat_id=ADMIN_ID, photo=file_id, caption=caption, reply_markup=kb_admin)
        else:
            await ctx.bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=caption, reply_markup=kb_admin)
    except Exception:
        pass

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—ã—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

async def admin_invoice_upload(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å (–∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–ø—Ä–æ—Å)."""
    if update.effective_user.id != ADMIN_ID:
        return
    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–ø—Ä–æ—Å
    cur.execute("SELECT order_id FROM invoice_requests WHERE closed=FALSE ORDER BY id DESC LIMIT 1")
    row = cur.fetchone()
    if not row:
        return
    order_id = row["order_id"]
    order = get_order(order_id)
    if not order:
        return

    file_id, is_photo = None, False
    if update.message.photo:
        file_id, is_photo = update.message.photo[-1].file_id, True
    elif update.message.document:
        file_id = update.message.document.file_id
    if not file_id:
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    try:
        if is_photo:
            await ctx.bot.send_photo(chat_id=order["user_id"], photo=file_id, caption="üßæ –ß–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
        else:
            await ctx.bot.send_document(chat_id=order["user_id"], document=file_id, caption="üßæ –ß–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        cur.execute("UPDATE invoice_requests SET closed=TRUE WHERE order_id=%s", (order_id,))
        await update.message.reply_text(f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (–∑–∞–∫–∞–∑ #{order_id}). –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.")
    except Exception:
        pass

async def help_vnote(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫ ‚Äî –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç file_id (—á—Ç–æ–±—ã –∑–∞–Ω–µ—Å—Ç–∏ –≤ .env)."""
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫—Ä—É–∂–æ–∫ (video note) ‚Äî –≤–µ—Ä–Ω—É file_id.")

async def detect_vnote(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª video note ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ file_id (–¥–ª—è DEV_VIDEO_NOTE_ID)."""
    if update.effective_user.id != ADMIN_ID:
        return
    if update.message.video_note:
        file_id = update.message.video_note.file_id
        await update.message.reply_text(f"file_id –∫—Ä—É–∂–∫–∞: {file_id}\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ .env –∫–∞–∫ DEV_VIDEO_NOTE_ID")

async def fallback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /start.")


async def grab_review_photo_id(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Admin sends a photo to get its file_id for reviews.
    Skips if there is an open invoice request to avoid collision with admin_invoice_upload.
    """
    if update.effective_user.id != ADMIN_ID:
        return
    # Skip if we are in the middle of invoice upload flow
    cur.execute("SELECT 1 FROM invoice_requests WHERE closed=FALSE ORDER BY id DESC LIMIT 1")
    if cur.fetchone():
        return
    if update.message and update.message.photo:
        fid = update.message.photo[-1].file_id
        await update.message.reply_text(f"[ADMIN] example file_id: {fid}")


async def cmd_photoid(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Admin-only. Reply with /photoid to a photo to get its file_id."""
    if update.effective_user.id != ADMIN_ID:
        return
    msg = update.message
    if not msg:
        return
    # Reply-mode preferred
    if msg.reply_to_message and msg.reply_to_message.photo:
        fid = msg.reply_to_message.photo[-1].file_id
        await msg.reply_text(f"[ADMIN] example file_id: {fid}")
        return
    # Fallback: command sent with attached photo (rare)
    if msg.photo:
        fid = msg.photo[-1].file_id
        await msg.reply_text(f"[ADMIN] example file_id: {fid}")
        return
    await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /photoid (–∫–∞–∫ reply).")


def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vnote", help_vnote))  # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫—Ä—É–∂–∫—É
    app.add_handler(CommandHandler("photoid", cmd_photoid))
    app.add_handler(CallbackQueryHandler(cb))

    # Admin: grab photo file_id for reviews
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, grab_review_photo_id))

    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫)
    app.add_handler(MessageHandler((filters.PHOTO | filters.Document.ALL) & ~filters.COMMAND, receipts))
    # –ê–¥–º–∏–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫—Ä—É–∂–æ–∫ ‚Äî –ø–æ–ª—É—á–∏—Ç—å file_id
    app.add_handler(MessageHandler(filters.VIDEO_NOTE & ~filters.COMMAND, detect_vnote))
    # –ê–¥–º–∏–Ω –∑–∞–ª–∏–≤–∞–µ—Ç —á–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞)
    app.add_handler(MessageHandler((filters.PHOTO | filters.Document.ALL) & ~filters.COMMAND, admin_invoice_upload))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))
    app.run_polling()

if __name__ == "__main__":
    main()
