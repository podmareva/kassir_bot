import os, json, secrets, logging
from datetime import datetime, timedelta
from typing import Optional
from zoneinfo import ZoneInfo

import psycopg
from psycopg.rows import dict_row
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("cashier")

async def safe_edit(q, text: str, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ ‚Äî –º–µ–Ω—è–µ–º caption,
    –µ—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ ‚Äî –º–µ–Ω—è–µ–º text.
    """
    try:
        m = q.message
        if getattr(m, "photo", None) or getattr(m, "document", None) or getattr(m, "video", None) or getattr(m, "video_note", None):
            return await q.edit_message_caption(caption=text, **kwargs)
        return await q.edit_message_text(text, **kwargs)
    except Exception:
        # fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ + –ª–æ–≥
        try:
            return await q.edit_message_caption(caption=text, **kwargs)
        except Exception:
            log.exception("safe_edit: both edit_message_text and edit_message_caption failed")
            return await q.edit_message_text(text, **kwargs)

# -------------------- CONFIG / ENV --------------------
load_dotenv()

BOT_TOKEN    = os.getenv("CASHIER_BOT_TOKEN")
ADMIN_ID     = int(os.getenv("ADMIN_ID", "0"))
DATABASE_URL = os.getenv("DATABASE_URL")

# —Ü–µ–ª–µ–≤—ã–µ –±–æ—Ç—ã (username)
BOT_UNPACK = os.getenv("BOT_UNPACK", "jtbd_assistant_bot")              # –ë–æ—Ç ‚Ññ1
BOT_COPY   = os.getenv("BOT_COPY",   "content_helper_assist_bot")       # –ë–æ—Ç ‚Ññ2

# —é—Ä-–¥–æ–∫—É–º–µ–Ω—Ç—ã + –∏–Ω—Ñ–æ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ (—Å—Å—ã–ª–∫–∏)
POLICY_URL      = (os.getenv("POLICY_URL") or "").strip()
OFFER_URL       = (os.getenv("OFFER_URL") or "").strip()
ADS_CONSENT_URL = (os.getenv("ADS_CONSENT_URL") or "").strip()
DEV_INFO_URL    = (os.getenv("DEV_INFO_URL") or "").strip()

# –∫—Ä—É–∂–æ–∫ (video note) ‚Äî file_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
DEV_VIDEO_NOTE_ID = os.getenv("DEV_VIDEO_NOTE_ID", "").strip()

# –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
PAY_PHONE   = os.getenv("PAY_PHONE", "+7XXXXXXXXXX")
PAY_NAME    = os.getenv("PAY_NAME", "–ò—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –ü.")
PAY_BANK    = os.getenv("PAY_BANK", "–û–ó–û–ù-–ë–∞–Ω–∫")

# —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (—á–∞—Å—ã)
TOKEN_TTL_HOURS = int(os.getenv("TOKEN_TTL_HOURS", "48"))

# –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ (file_id –∫–∞—Ä—Ç–∏–Ω–æ–∫)
EXAMPLE_IDS = [
    os.getenv("EXAMPLE_1_ID"),
    os.getenv("EXAMPLE_2_ID"),
    os.getenv("EXAMPLE_3_ID"),
    os.getenv("EXAMPLE_4_ID"),
    os.getenv("EXAMPLE_5_ID"),
]

# –ê–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ 2 –±–æ—Ç–∞)
PROMO_ACTIVE = os.getenv("PROMO_ACTIVE", "true").lower() == "true"
PROMO_PRICES = {
    "unpack": 1890.00,   # –ë–æ—Ç ‚Ññ1
    "copy":   2490.00,   # –ë–æ—Ç ‚Ññ2
    "b12":    3990.00,   # –ü–∞–∫–µ—Ç 1+2
}

# –ö–æ–Ω–µ—Ü –∞–∫—Ü–∏–∏ –∏ TZ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
PROMO_END_ISO = os.getenv("PROMO_END_ISO", "").strip()  # –Ω–∞–ø—Ä. 2025-08-18T00:00:00+03:00
TIMEZONE      = os.getenv("TIMEZONE", "Europe/Moscow")

if not (BOT_TOKEN and ADMIN_ID and DATABASE_URL and POLICY_URL and OFFER_URL and ADS_CONSENT_URL):
    raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å .env: CASHIER_BOT_TOKEN, ADMIN_ID, DATABASE_URL, POLICY_URL, OFFER_URL, ADS_CONSENT_URL")

# logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("cashier")

# -------------------- DB --------------------
conn = psycopg.connect(DATABASE_URL, autocommit=True, sslmode="require", row_factory=dict_row)
cur  = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS consents(
  user_id BIGINT PRIMARY KEY,
  accepted_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS products(
  code TEXT PRIMARY KEY,
  title TEXT NOT NULL,
  price NUMERIC(10,2) NOT NULL,
  targets JSONB NOT NULL
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS orders(
  id BIGSERIAL PRIMARY KEY,
  user_id BIGINT NOT NULL,
  product_code TEXT NOT NULL REFERENCES products(code),
  amount NUMERIC(10,2) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',  -- pending/await_receipt/paid/rejected
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS receipts(
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  file_id TEXT NOT NULL,
  file_type TEXT NOT NULL,  -- photo/document
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT now()
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS tokens(
  token TEXT PRIMARY KEY,
  bot_name TEXT NOT NULL,
  user_id BIGINT NOT NULL,
  expires_at TIMESTAMPTZ NULL
);""")
# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤
cur.execute("ALTER TABLE tokens ADD COLUMN IF NOT EXISTS expires_at TIMESTAMPTZ NULL;")
cur.execute("""CREATE TABLE IF NOT EXISTS allowed_users(
  user_id BIGINT NOT NULL,
  bot_name TEXT NOT NULL,
  PRIMARY KEY(user_id, bot_name)
);""")
cur.execute("""CREATE TABLE IF NOT EXISTS invoice_requests(
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  requested_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  closed BOOLEAN NOT NULL DEFAULT FALSE
);""")


# –ö–∞—Ç–∞–ª–æ–≥ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω (–±–µ–∑ —Ñ–æ—Ç–æ-–±–æ—Ç–∞)
CATALOG = {
    "unpack": {"title": "–ë–æ—Ç ‚Ññ1 ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê (JTBD)¬ª",        "price": 2990.00, "targets": [BOT_UNPACK]},
    "copy":   {"title": "–ë–æ—Ç ‚Ññ2 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª",         "price": 5490.00, "targets": [BOT_COPY]},
    "b12":    {"title": "–ü–∞–∫–µ—Ç ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –∫–æ–Ω—Ç–µ–Ω—Ç¬ª",                  "price": 7990.00, "targets": [BOT_UNPACK, BOT_COPY]},
}
for code, p in CATALOG.items():
    cur.execute(
        """INSERT INTO products(code, title, price, targets)
           VALUES (%s,%s,%s,%s::jsonb)
           ON CONFLICT (code) DO UPDATE SET title=EXCLUDED.title, price=EXCLUDED.price, targets=EXCLUDED.targets""",
        (code, p["title"], p["price"], json.dumps(p["targets"]))
    )

# -------------------- Utils --------------------
def set_consent(user_id: int):
    try:
        cur.execute(
            "INSERT INTO consents(user_id, accepted_at) VALUES(%s, now()) ON CONFLICT DO NOTHING",
            (user_id,)
        )
    except Exception as e:
        log.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è: %s", e)

def get_product(code: str) -> Optional[dict]:
    cur.execute("SELECT * FROM products WHERE code=%s", (code,))
    return cur.fetchone()

def current_price(code: str) -> float:
    base = float(get_product(code)["price"])
    if PROMO_ACTIVE and code in PROMO_PRICES:
        return float(PROMO_PRICES[code])
    return base

def create_order(user_id: int, code: str) -> int:
    price = current_price(code)
    cur.execute(
        "INSERT INTO orders(user_id, product_code, amount, status) VALUES(%s,%s,%s,'pending') RETURNING id",
        (user_id, code, price)
    )
    return cur.fetchone()["id"]

def set_status(order_id: int, status: str):
    cur.execute("UPDATE orders SET status=%s WHERE id=%s", (status, order_id))

def get_order(order_id: int) -> Optional[dict]:
    cur.execute("SELECT * FROM orders WHERE id=%s", (order_id,))
    return cur.fetchone()

def gen_tokens_with_ttl(user_id: int, targets: list[str], ttl_hours: int):
    links = []
    expires_at = datetime.utcnow() + timedelta(hours=ttl_hours) if ttl_hours > 0 else None
    for bot_name in targets:
        token = secrets.token_urlsafe(8)
        cur.execute(
            "INSERT INTO tokens(token, bot_name, user_id, expires_at) VALUES(%s,%s,%s,%s) ON CONFLICT DO NOTHING",
            (token, bot_name, user_id, expires_at)
        )
        links.append((bot_name, f"https://t.me/{bot_name}?start={token}"))
    return links

def shop_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–æ—Ç–∞ ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê¬ª",         callback_data="buy:unpack")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–æ—Ç–∞ ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª",   callback_data="buy:copy")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–æ—Ç–æ–≤ ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞+–∫–æ–Ω—Ç–µ–Ω—Ç¬ª",            callback_data="buy:b12")],
        [InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫",                                callback_data="upload_receipt")],
    ])

PROMO_TEXT = (
    "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –º–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ 2 –¥–Ω—è)\n\n"
    "üõ† –ë–æ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n"
    "‚Ä¢ ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî <s>2 990 ‚ÇΩ</s> ‚Üí 1 890 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 1 100 ‚ÇΩ)\n"
    "‚Ä¢ ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª ‚Äî <s>5 490 ‚ÇΩ</s> ‚Üí 2 490 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 3 000 ‚ÇΩ)\n\n"
    "üíé –ü–∞–∫–µ—Ç ‚Äî –µ—â—ë –≤—ã–≥–æ–¥–Ω–µ–µ\n"
    "‚Ä¢ –ë–æ—Ç—ã ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞+–∫–æ–Ω—Ç–µ–Ω—Ç¬ª ‚Äî <s>7 990 ‚ÇΩ</s> ‚Üí 3 990 ‚ÇΩ (–≤—ã–≥–æ–¥–∞ 4 000 ‚ÇΩ)"
)
ABOUT_BOTS = (
    "–ë–æ—Ç ‚Ññ1 ¬´–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê (JTBD)¬ª ‚Äî –ø—Ä–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ ¬´–ø–æ–∫—É–ø–∞—é—Ç¬ª, "
    "–∏ –∫–∞–∫ –ø–æ–¥ —ç—Ç–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
    "–ë–æ—Ç ‚Ññ2 ¬´–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫¬ª ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω, –ø–æ—Å—Ç—ã, Reels/Stories, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ "
    "–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏."
)

# ----- –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ -----
async def send_examples_screens(ctx, chat_id: int):
    ids = [fid for fid in EXAMPLE_IDS if fid]
    if not ids:
        return
    media = []
    for i, fid in enumerate(ids):
        try:
            if i == 0:
                media.append(InputMediaPhoto(media=fid, caption="–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–æ–≤"))
            else:
                media.append(InputMediaPhoto(media=fid))
        except Exception as e:
            log.warning("Bad example file_id skipped: %s", e)
    if media:
        try:
            await ctx.bot.send_media_group(chat_id=chat_id, media=media)
        except Exception as e:
            log.warning("send_media_group error: %s", e)

# ----- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–∫—Ü–∏–∏ (T-48/T-24) -----
def get_audience_user_ids() -> list[int]:
    cur.execute("SELECT user_id FROM consents")
    return [r["user_id"] for r in cur.fetchall()]

async def job_promo_countdown(ctx: ContextTypes.DEFAULT_TYPE):
    hours_left = ctx.job.data
    if hours_left == 48:
        text = "‚è∞ –ß–µ—Ä–µ–∑ 2 —Å—É—Ç–æ–∫ —Å–ø–µ—Ü—Ü–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è. –£—Å–ø–µ–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∞–∫—Ü–∏–∏."
    elif hours_left == 24:
        text = "‚è∞ –ß–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ —Å–ø–µ—Ü—Ü–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –∫—É–ø–∏—Ç—å –≤—ã–≥–æ–¥–Ω–æ."
    else:
        text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å ~{hours_left} —á–∞—Å–æ–≤ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏."
    kb = shop_keyboard()
    for uid in get_audience_user_ids():
        try:
            await ctx.bot.send_message(uid, text, reply_markup=kb, parse_mode="HTML")
        except Exception:
            pass

# -------------------- Handlers --------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    # 1) –ö—Ä—É–∂–æ–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω file_id)
    if DEV_VIDEO_NOTE_ID:
        try:
            await ctx.bot.send_video_note(chat_id=uid, video_note=DEV_VIDEO_NOTE_ID)
        except Exception as e:
            log.warning("video note send error: %s", e)

    # 2) –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π ¬´–≥–µ–π—Ç¬ª ‚Äî —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–Ω–æ–ø–∫–∞—Ö
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=POLICY_URL)],
        [InlineKeyboardButton("üìú –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã",              url=OFFER_URL)],
        [InlineKeyboardButton("‚úâÔ∏è –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–∫–ª–∞–º—É",        url=ADS_CONSENT_URL)],
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="consent_ok")],
    ])
    await ctx.bot.send_message(
        chat_id=uid,
        text=(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É \u00ab‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ\u00bb, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è:"
        ),
        reply_markup=kb
    )


async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    data = q.data or ""

    try:
        await q.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶", show_alert=False)
    except Exception:
        pass

    try:
        if data == "consent_ok":
            set_consent(uid)

            await safe_edit(q, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ—Ç—ã:", parse_mode="HTML")

            await ctx.bot.send_message(
                chat_id=uid,
                text=(
                    "üß† <b>–ë–æ—Ç ‚Ññ1: –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê (JTBD)</b>\n"
                    "–ü–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ¬´–ø–æ–∫—É–ø–∞–µ—Ç¬ª –∫–ª–∏–µ–Ω—Ç, –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
                    "‚úçÔ∏è <b>–ë–æ—Ç ‚Ññ2: –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫</b>\n"
                    "–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω, —Ç–µ–∫—Å—Ç—ã, Reels, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏."
                ),
                parse_mode="HTML"
            )

            await send_examples_screens(ctx, uid)

            await ctx.bot.send_message(
                chat_id=uid,
                text=(
                    "üéÅ <b>–°–ø–µ—Ü—Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ 2 –¥–Ω—è:</b>\n\n"
                    "üõ† <b>–û—Ç–¥–µ–ª—å–Ω—ã–µ –±–æ—Ç—ã</b>\n"
                    "‚Ä¢ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ê–Ω–∞–ª–∏–∑ –¶–ê ‚Äî <s>2 990 ‚ÇΩ</s> ‚Üí <b>1 890 ‚ÇΩ</b>\n"
                    "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ‚Äî <s>3 890 ‚ÇΩ</s> ‚Üí <b>2 490 ‚ÇΩ</b>\n\n"
                    "üíé <b>–ü–∞–∫–µ—Ç 1+2</b>\n"
                    "‚Ä¢ –í—Å—ë –≤–º–µ—Å—Ç–µ ‚Äî <s>6 880 ‚ÇΩ</s> ‚Üí <b>3 990 ‚ÇΩ</b>"
                ),
                parse_mode="HTML"
            )

            await ctx.bot.send_message(
                chat_id=uid,
                text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å:",
                reply_markup=shop_keyboard()
            )
            return

        if data.startswith("buy:"):
            code = data.split(":", 1)[1]
            prod = get_product(code)
            if not prod:
                await q.edit_message_text("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É: /start")
                return

            order_id = create_order(uid, code)
            price = current_price(code)
            set_status(order_id, "await_receipt")

            old = float(prod["price"])
            old_line = f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <s>{old:.2f} ‚ÇΩ</s>\n" if PROMO_ACTIVE else ""

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É", callback_data=f"send_receipt:{order_id}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="go_shop")]
            ])

            await q.edit_message_text(
                f"üßæ <b>{prod['title']}</b>\n\n"
                f"{old_line}–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price:.2f} ‚ÇΩ</b>\n\n"
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É {PAY_BANK}</b>\n"
                f"‚Ä¢ –ù–æ–º–µ—Ä: <code>{PAY_PHONE}</code>\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>{PAY_NAME}</b>\n"
                f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <code>ORDER-{order_id}</code>\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ —á–µ—Ä–µ–∑ –≤–∏—Ç—Ä–∏–Ω—É.",
                parse_mode="HTML",
                reply_markup=kb
            )

            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await ctx.bot.send_message(
                chat_id=uid,
                text=(
                    "üîî <b>–í–∞–∂–Ω–æ:</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫.\n"
                    "–Ø –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–æ—Ç—É.\n\n"
                    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞."
                ),
                parse_mode="HTML"
            )

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å, –µ—Å–ª–∏ —á–µ–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            async def remind_unpaid(context: ContextTypes.DEFAULT_TYPE):
                cur.execute(
                    "SELECT status FROM orders WHERE id=%s", (order_id,)
                )
                row = cur.fetchone()
                if row and row["status"] == "await_receipt":
                    try:
                        await context.bot.send_message(
                            chat_id=uid,
                            text=(
                                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑, –Ω–æ –µ—â—ë –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —á–µ–∫.\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
                            )
                        )
                    except Exception:
                        pass

            ctx.job_queue.run_once(remind_unpaid, when=3600, name=f"remind_order_{order_id}")

            return

        if data.startswith("send_receipt:"):
            order_id = int(data.split(":", 1)[1])
            order = get_order(order_id)
            if not order or order["user_id"] != uid:
                await q.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É: /start")
                return
            await q.edit_message_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—à–ª—é –¥–æ—Å—Ç—É–ø.")
            return

        # --- –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ---
        if data.startswith("confirm:") or data.startswith("reject:") \
           or data.startswith("send_invoice:") or data.startswith("close_invoice:"):
            if uid != ADMIN_ID:
                try:
                    await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
                except Exception:
                    pass
                return

            if data.startswith("confirm:") or data.startswith("reject:"):
                order_id = int(data.split(":", 1)[1])
                order = get_order(order_id)
                if not order:
                    await q.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                if data.startswith("reject:"):
                    set_status(order_id, "rejected")
                    await safe_edit(q, f"–ó–∞–∫–∞–∑ #{order_id}: –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=None)
                    try:
                        await ctx.bot.send_message(
                            order["user_id"],
                            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –µ—â—ë —Ä–∞–∑."
                        )
                    except Exception:
                        pass
                    return


                # confirm
                set_status(order_id, "paid")
                prod  = get_product(order["product_code"])
                links = gen_tokens_with_ttl(order["user_id"], prod["targets"], TOKEN_TTL_HOURS)

                warn = (
                    "‚úÖ –ß–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n\n"
                    "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ. –û–Ω–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è "
                    f"(~{TOKEN_TTL_HOURS} —á) –∏ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
                )
                btns = [[InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å @{bn}", url=link)] for bn, link in links]

                await safe_edit(q, f"–ó–∞–∫–∞–∑ #{order_id}: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=None)

                try:
                    await ctx.bot.send_message(
                        order["user_id"], warn,
                        reply_markup=InlineKeyboardMarkup(btns), parse_mode="HTML"
                    )
                except Exception:
                    pass
                return


            if data.startswith("close_invoice:"):
                order_id = int(data.split(":", 1)[1])
                cur.execute("UPDATE invoice_requests SET closed=TRUE WHERE order_id=%s", (order_id,))
                await safe_edit(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–∫—Ä—ã—Ç.")
                return

        if data.startswith("request_invoice:"):
            order_id = int(data.split(":", 1)[1])
            order = get_order(order_id)
            if not order or order["user_id"] != uid:
                await q.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            cur.execute(
                "INSERT INTO invoice_requests(order_id, closed) VALUES(%s, FALSE) "
                "ON CONFLICT (order_id) DO UPDATE SET closed=FALSE",
                (order_id,)
            )
            kb_admin = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"send_invoice:{order_id}")],
                [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å",        callback_data=f"close_invoice:{order_id}")],
            ])
            try:
                await ctx.bot.send_message(ADMIN_ID, f"üßæ –ó–∞–ø—Ä–æ—Å —á–µ–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {uid}", reply_markup=kb_admin)
            except Exception:
                pass
            await q.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Ñ–∞–π–ª –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.", show_alert=True)
            return

        await q.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", show_alert=False)

    except Exception:
        log.exception("Callback error for data=%r uid=%s", data, uid)
        try:
            await ctx.bot.send_message(uid, "‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /start")
        except Exception:
            pass

async def receipts(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç). –ü—Ä–∏–≤—è–∂–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É await_receipt –∏ –ø–µ—Ä–µ—à–ª—ë–º –∞–¥–º–∏–Ω—É."""
    uid = update.effective_user.id
    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç —á–µ–∫–∞
    cur.execute("SELECT id FROM orders WHERE user_id=%s AND status='await_receipt' ORDER BY id DESC LIMIT 1", (uid,))
    row = cur.fetchone()
    if not row:
        return
    order_id = row["id"]

    file_id, file_type = None, None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        file_type = "photo"
    elif update.message.document:
        file_id = update.message.document.file_id
        file_type = "document"
    if not file_id:
        await update.message.reply_text("‚ö† –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    cur.execute("INSERT INTO receipts(order_id, file_id, file_type) VALUES(%s,%s,%s)", (order_id, file_id, file_type))
    set_status(order_id, "pending")

    kb_admin = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{order_id}"),
                                      InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data=f"reject:{order_id}")]])
    caption = f"üí≥ –ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {uid}"
    try:
        if file_type == "photo":
            await ctx.bot.send_photo(ADMIN_ID, file_id, caption=caption, reply_markup=kb_admin)
        else:
            await ctx.bot.send_document(ADMIN_ID, file_id, caption=caption, reply_markup=kb_admin)
    except Exception:
        pass
    await update.message.reply_text("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# --- –ê–¥–º–∏–Ω: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–µ–≥–æ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∑–∞–ø—Ä–æ—Å—ã) ---
async def admin_invoice_upload(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    cur.execute("SELECT order_id FROM invoice_requests WHERE closed=FALSE ORDER BY id DESC LIMIT 1")
    row = cur.fetchone()
    if not row:
        return
    order_id = row["order_id"]
    order = get_order(order_id)
    if not order:
        return

    file_id, is_photo = None, False
    if update.message.photo:
        file_id = update.message.photo[-1].file_id; is_photo = True
    elif update.message.document:
        file_id = update.message.document.file_id
    if not file_id:
        return

    try:
        if is_photo:
            await ctx.bot.send_photo(order["user_id"], file_id, caption="üßæ –ß–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
        else:
            await ctx.bot.send_document(order["user_id"], file_id, caption="üßæ –ß–µ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
        cur.execute("UPDATE invoice_requests SET closed=TRUE WHERE order_id=%s", (order_id,))
        await update.message.reply_text(f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (–∑–∞–∫–∞–∑ #{order_id}). –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.")
    except Exception:
        pass

# --- /vnote: –ø–æ–ª—É—á–∏—Ç—å file_id –∫—Ä—É–∂–∫–∞ ---
async def help_vnote(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫—Ä—É–∂–æ–∫ (video note) ‚Äî –≤–µ—Ä–Ω—É file_id.")

async def detect_vnote(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if update.message.video_note:
        await update.message.reply_text(f"file_id –∫—Ä—É–∂–∫–∞: {update.message.video_note.file_id}\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ .env –∫–∞–∫ DEV_VIDEO_NOTE_ID")

# --- /photoid: –≤—ã–¥–∞—Ç—å file_id –ø—Ä–∏–º–µ—Ä–∞ (–∞–¥–º–∏–Ω) ---
async def cmd_photoid(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    m = update.message
    if m and m.reply_to_message and m.reply_to_message.photo:
        await m.reply_text(f"[ADMIN] example file_id: {m.reply_to_message.photo[-1].file_id}")
        return
    if m and m.photo:
        await m.reply_text(f"[ADMIN] example file_id: {m.photo[-1].file_id}")
        return
    await m.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /photoid (–∫–∞–∫ reply).")

async def fallback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /start.")

def main():
    log.info("run_polling... token prefix: %s******", (BOT_TOKEN or "")[:10])
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vnote", help_vnote))
    app.add_handler(CommandHandler("photoid", cmd_photoid))
    app.add_handler(CallbackQueryHandler(cb))

    # –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á–µ–∫
    app.add_handler(MessageHandler((filters.PHOTO | filters.Document.ALL) & ~filters.COMMAND, receipts))
    # –∞–¥–º–∏–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫—Ä—É–∂–æ–∫ ‚Äî –ø–æ–ª—É—á–∏—Ç—å file_id
    app.add_handler(MessageHandler(filters.VIDEO_NOTE & ~filters.COMMAND, detect_vnote))
    # –∞–¥–º–∏–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞)
    app.add_handler(MessageHandler((filters.PHOTO | filters.Document.ALL) & ~filters.COMMAND, admin_invoice_upload))
    # —Ç–µ–∫—Å—Ç ‚Äîfallback
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))

    # --- –î–≤–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: T-48h –∏ T-24h –¥–æ –∫–æ–Ω—Ü–∞ –∞–∫—Ü–∏–∏ ---
    if PROMO_END_ISO:
        try:
            tz = ZoneInfo(TIMEZONE)
            promo_end = datetime.fromisoformat(PROMO_END_ISO)
            if promo_end.tzinfo is None:
                promo_end = promo_end.replace(tzinfo=tz)

            t_minus_48 = promo_end - timedelta(hours=48)
            t_minus_24 = promo_end - timedelta(hours=24)
            now = datetime.now(promo_end.tzinfo)

            if t_minus_48 > now:
                app.job_queue.run_once(job_promo_countdown, when=t_minus_48, data=48, name="promo_Tminus48h")
                log.info("Scheduled T-48h at %s", t_minus_48.isoformat())

            if t_minus_24 > now:
                app.job_queue.run_once(job_promo_countdown, when=t_minus_24, data=24, name="promo_Tminus24h")
                log.info("Scheduled T-24h at %s", t_minus_24.isoformat())

        except Exception as e:
            log.warning("PROMO countdown schedule error: %s", e)

    app.run_polling()

if __name__ == "__main__":
    main()
